/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatmulticasthilos.cliente;

import java.io.IOException;
import java.net.UnknownHostException;

import chatmulticasthilos.compartido.Interaccion;
import chatmulticasthilos.compartido.Puertos;
import chatmulticasthilos.compartido.Usuario;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.MulticastSocket;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JEditorPane;
import javax.swing.JFileChooser;
import javax.swing.text.BadLocationException;
import javax.swing.text.Element;
import javax.swing.text.StyleConstants;
import javax.swing.text.html.HTML;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;
import sun.util.calendar.Gregorian;

/**
 *
 * @author Isaac
 */
public class interfaz extends javax.swing.JFrame implements NuevoMensajeListener {

    private MulticastSocket socket;
    private ReceptorMensajes receiver;
    ServerSocket serverSocket;
    private InetAddress multicastAddress;
    ArrayList<Usuario> usuarios;
    Usuario usuarioSeleccionado;
    DefaultListModel<Usuario> model = new DefaultListModel();
    private String nombreUsuario;
    HTMLDocument docMessage;
    HTMLDocument docChat;
    int banderaEmoji;
    int banderaSend = 1;
    DataOutputStream dos; 
    /**/
    File f;
    long tamF;
    String nomF;
    String ruta;
    /**/
    public interfaz() {
        nombreUsuario = JOptionPane.showInputDialog("Nombre de usuario");
        if (nombreUsuario == null) {
            System.exit(1);
        }
        initComponents();
        chatView.setContentType("text/html");
        message.setContentType("text/html");
        jButton11.setEnabled(false);
        jButton12.setEnabled(false);  
        jButton10.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaUsuarios = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        chatView = new javax.swing.JEditorPane();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        message = new javax.swing.JEditorPane();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(nombreUsuario);

        jButton1.setText("Conectar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Desconectar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        model  = new DefaultListModel<Usuario>();
        listaUsuarios.setModel(model);
        listaUsuarios.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaUsuariosValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listaUsuarios);

        jScrollPane2.setViewportView(chatView);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chatmulticasthilos/emojis/11.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chatmulticasthilos/emojis/22.png"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chatmulticasthilos/emojis/44.png"))); // NOI18N
        jButton5.setToolTipText("");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chatmulticasthilos/emojis/33.png"))); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chatmulticasthilos/emojis/55.png"))); // NOI18N
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Grupal");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Enviar");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chatmulticasthilos/emojis/file.png"))); // NOI18N
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jScrollPane4.setViewportView(message);

        jButton11.setText("agregar");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setText("Reset");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton10)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton8)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jButton4)
                            .addComponent(jButton5)
                            .addComponent(jButton6)
                            .addComponent(jButton7)
                            .addComponent(jButton12)
                            .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton10)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                                .addGap(17, 17, 17)))
                        .addGap(13, 13, 13))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8)
                        .addContainerGap(107, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //DESCONECTAR
        disconnect();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        //Archivos
        f = seleccionarArchivo();
        tamF = f.length();
        nomF = f.getName();
        ruta = f.getAbsolutePath(); 
        try {
            dos = new DataOutputStream(new FileOutputStream("C:\\Users\\Isaac\\Desktop\\datagrama\\" + nombreUsuario + "-" + nomF));                          
        } catch (Exception e) {
        }
        sendMessage("", 1);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //CONECTAR
        try {
            //CONECTAR
            connect("230.0.0.1");
        } catch (UnknownHostException ex) {
            System.out.println(ex.getMessage());
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // :)
        banderaEmoji = 1;
        //message.setContentType("text/html");
        System.out.println(message.getText());
        //HTMLEditorKit hek = new HTMLEditorKit();
        //message.setEditorKit(hek);
        docMessage = (HTMLDocument) message.getDocument();
        jButton4.setEnabled(false);
        jButton5.setEnabled(false);
        jButton6.setEnabled(false);
        jButton7.setEnabled(false);
        //agregar el de + y desbloqueo
        jButton11.setEnabled(true);
        jButton12.setEnabled(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // :D
        banderaEmoji = 2;
        //message.setContentType("text/html");
        System.out.println(message.getText());
        //HTMLEditorKit hek = new HTMLEditorKit();
        //message.setEditorKit(hek);
        docMessage = (HTMLDocument) message.getDocument();
        jButton3.setEnabled(false);
        jButton5.setEnabled(false);
        jButton6.setEnabled(false);
        jButton7.setEnabled(false);
        //agregar el de + y desbloqueo
        jButton11.setEnabled(true);
        jButton12.setEnabled(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // ;)
        banderaEmoji = 3;
        //message.setContentType("text/html");
        System.out.println(message.getText());
        //HTMLEditorKit hek = new HTMLEditorKit();
        //message.setEditorKit(hek);
        docMessage = (HTMLDocument) message.getDocument();
        jButton3.setEnabled(false);
        jButton4.setEnabled(false);
        jButton6.setEnabled(false);
        jButton7.setEnabled(false);
        //agregar el de + y desbloqueo
        jButton11.setEnabled(true);
        jButton12.setEnabled(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // ):

        banderaEmoji = 4;
        // message.setContentType("text/html");
        System.out.println(message.getText());
        //HTMLEditorKit hek = new HTMLEditorKit();
        //message.setEditorKit(hek);
        docMessage = (HTMLDocument) message.getDocument();
        jButton3.setEnabled(false);
        jButton5.setEnabled(false);
        jButton4.setEnabled(false);
        jButton7.setEnabled(false);
        //agregar el de + y desbloqueo
        jButton11.setEnabled(true);
        jButton12.setEnabled(true);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // :,(
        banderaEmoji = 5;
        message.setContentType("text/html");
        System.out.println(message.getText());
        //HTMLEditorKit hek = new HTMLEditorKit();
        //message.setEditorKit(hek);
        docMessage = (HTMLDocument) message.getDocument();
        jButton3.setEnabled(false);
        jButton5.setEnabled(false);
        jButton6.setEnabled(false);
        jButton4.setEnabled(false);
        //agregar el de + y desbloqueo
        jButton11.setEnabled(true);
        jButton12.setEnabled(true);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        //ENVIAR    

        String auxmsj = message.getText();
        //System.out.println("DESPUES DE ENVIAR-->" + auxmsj);
        int idx1 = auxmsj.lastIndexOf("<body>");
        int idx2 = auxmsj.indexOf("</body>") - 1;
        String c = "";
        for (int i = (idx1 + 6); i < idx2; i++) {
            c = c + auxmsj.charAt(i);
        } 
        if(banderaSend==1)
        {
            docChat = (HTMLDocument) chatView.getDocument();
            banderaSend = 2;
        }
        sendMessage(c,2);
        message.setText("");
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        //BORRAR SELECCION INDIVIDUAL
        usuarioSeleccionado = null;
        listaUsuarios.clearSelection();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void listaUsuariosValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaUsuariosValueChanged
        usuarioSeleccionado = (Usuario) listaUsuarios.getSelectedValue();
    }//GEN-LAST:event_listaUsuariosValueChanged

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        //AGREGAR EMOJI 1
        jButton12.setEnabled(true);
        String img = "";
        Element[] roots;
        Element body;
        switch (banderaEmoji) {
            case 1:
                System.out.println("-->" + message.getText());
                img = "<img src=" + ClassLoader.getSystemResource("\\chatmulticasthilos\\emojis\\11.png").toString() + ">";
                roots = docMessage.getRootElements();
                body = null;
                for (int i = 0; i < roots[0].getElementCount(); i++) {
                    Element element = roots[0].getElement(i);
                    if (element.getAttributes().getAttribute(StyleConstants.NameAttribute) == HTML.Tag.BODY) {
                        body = element;
                        break;
                    }
                }
                try {
                    docMessage.insertBeforeEnd(body, img);
                } catch (Exception ex) {
                }
                System.out.println(chatView.getText());
                break;
            case 2:
                System.out.println("-->" + message.getText());
                img = "<img src=" + ClassLoader.getSystemResource("\\chatmulticasthilos\\emojis\\22.png").toString() + ">";
                roots = docMessage.getRootElements();
                body = null;
                for (int i = 0; i < roots[0].getElementCount(); i++) {
                    Element element = roots[0].getElement(i);
                    if (element.getAttributes().getAttribute(StyleConstants.NameAttribute) == HTML.Tag.BODY) {
                        body = element;
                        break;
                    }
                }
                try {
                    docMessage.insertBeforeEnd(body, img);
                } catch (Exception ex) {
                }
                System.out.println(chatView.getText());
                break;
            case 3:
                System.out.println("-->" + message.getText());
                img = "<img src=" + ClassLoader.getSystemResource("\\chatmulticasthilos\\emojis\\44.png").toString() + ">";
                roots = docMessage.getRootElements();
                body = null;
                for (int i = 0; i < roots[0].getElementCount(); i++) {
                    Element element = roots[0].getElement(i);
                    if (element.getAttributes().getAttribute(StyleConstants.NameAttribute) == HTML.Tag.BODY) {
                        body = element;
                        break;
                    }
                }
                try {
                    docMessage.insertBeforeEnd(body, img);
                } catch (Exception ex) {
                }
                System.out.println(chatView.getText());
                break;
            case 4:
                System.out.println("-->" + message.getText());
                img = "<img src=" + ClassLoader.getSystemResource("\\chatmulticasthilos\\emojis\\33.png").toString() + ">";
                roots = docMessage.getRootElements();
                body = null;
                for (int i = 0; i < roots[0].getElementCount(); i++) {
                    Element element = roots[0].getElement(i);
                    if (element.getAttributes().getAttribute(StyleConstants.NameAttribute) == HTML.Tag.BODY) {
                        body = element;
                        break;
                    }
                }
                try {
                    docMessage.insertBeforeEnd(body, img);
                } catch (Exception ex) {
                }
                System.out.println(chatView.getText());
                break;
            case 5:
                System.out.println("-->" + message.getText());
                img = "<img src=" + ClassLoader.getSystemResource("\\chatmulticasthilos\\emojis\\55.png").toString() + ">";
                roots = docMessage.getRootElements();
                body = null;
                for (int i = 0; i < roots[0].getElementCount(); i++) {
                    Element element = roots[0].getElement(i);
                    if (element.getAttributes().getAttribute(StyleConstants.NameAttribute) == HTML.Tag.BODY) {
                        body = element;
                        break;
                    }
                }
                try {
                    docMessage.insertBeforeEnd(body, img);
                } catch (Exception ex) {
                }
                System.out.println(chatView.getText());
                break;
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        //DESBLOQUEO
        jButton3.setEnabled(true);
        jButton5.setEnabled(true);
        jButton4.setEnabled(true);
        jButton7.setEnabled(true);
        jButton6.setEnabled(true);
        jButton11.setEnabled(false);
        jButton12.setEnabled(false);
    }//GEN-LAST:event_jButton12ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new interfaz().setVisible(true);
            }
        });
    }

    private void disconnect() {
        try {
            DatagramPacket dp;
            byte[] data = new byte[Interaccion.MAX_BUFFER_SIZE];
            data[0] = Interaccion.DESPEDIDA_USUARIO;
            dp = new DatagramPacket(data, Interaccion.MAX_BUFFER_SIZE, this.multicastAddress, Puertos.SERVIDOR_MULTICAST);
            socket.send(dp);
            socket.close();
        } catch (IOException ex) {
            System.err.println(ex.getMessage());
        }
    }

    private void connect(String multicastAddress)
            throws UnknownHostException, IOException {
        this.multicastAddress = InetAddress.getByName(multicastAddress);
        DatagramPacket dp;

        socket = new MulticastSocket(Puertos.SERVIDOR_MULTICAST);
        socket.setLoopbackMode(false);
        socket.joinGroup(this.multicastAddress);
        byte[] data = new byte[Interaccion.MAX_BUFFER_SIZE];

        // <editor-fold desc="Aviso de conexión">
        data[0] = Interaccion.SALUDO_CLIENTE;
        byte[] nombre = nombreUsuario.getBytes();
        data[1] = (byte) nombre.length;
        System.arraycopy(nombre, 0, data, 2, nombre.length);

        dp = new DatagramPacket(data, Interaccion.MAX_BUFFER_SIZE, this.multicastAddress, Puertos.SERVIDOR_MULTICAST);
        socket.send(dp);
        // </editor-fold>
        // <editor-fold desc="Recibimos la lista de usuarios ya conectados al chat">
        usuarios = new ArrayList<Usuario>();
        recibeUsuarios();
        // </editor-fold>

        receiver = new ReceptorMensajes(socket);
        receiver.addListener(this);
        receiver.start();
    }

    private void recibeUsuarios() {
        try {
            ServerSocket ss = new ServerSocket(Puertos.CLIENTE_FLUJO);
            Socket s = ss.accept();
            ObjectInputStream is = new ObjectInputStream(s.getInputStream());

            int usu = is.readInt();

            for (int i = 0; i < usu; i++) {
                usuarios.add((Usuario) is.readObject());
            }

            for (int i = 0; i < usu; i++) {
                model.addElement(usuarios.get(i));

            }
            is.close();
            s.close();
            ss.close();
        } catch (ClassNotFoundException ce) {
            System.err.println(ce.getMessage());
        } catch (IOException ex) {
            System.err.println(ex.getMessage());
        }
    }

    private void sendMessage(String message, int FlagA) 
    {
        if(FlagA==1) //Se envia un archivo
        {
            try 
            {
                byte[] data = new byte[1];
                data[0] = Interaccion.FILE;
                byte[] b = new byte[Interaccion.MAX_BUFFER_SIZE];
                System.out.println("Servicio de transmision de archivos listo... ¡comienza envio!");                                       
                DataInputStream dis = new DataInputStream(new FileInputStream(ruta));
                long numPart = 0;
                int br = 0;
                int brx = 0;
                if(Interaccion.MAX_BUFFER_SIZE < tamF) //Fragmentamos
                {                   
                    numPart = f.length() / Interaccion.MAX_BUFFER_SIZE; //Numero de partes que tenemos que fragmentar
                    
                    if( (tamF % Interaccion.MAX_BUFFER_SIZE) > 0 )
                        numPart = numPart + 1;                                                                       
                        for( int i = 0; i < numPart; i++ )
                        {      
                            br = dis.read(b);                  
                            ByteArrayInputStream bais = new ByteArrayInputStream(b);                     
                            byte[] b2 = new byte[br];                        
                            brx = bais.read(b2);                        
                            FIleP fi = new FIleP(this, b2);                                                                                                    
                            ByteArrayOutputStream baos = new ByteArrayOutputStream();
                            ObjectOutputStream oos = new ObjectOutputStream(baos);
                            oos.writeObject(fi);
                            oos.flush();
                            byte[] tmp = baos.toByteArray();
                            //System.arraycopy(src, srcpos, dis, posDes, len););
                            System.arraycopy(data,0,tmp,1,data.length);
                            DatagramPacket p1 = new DatagramPacket(tmp, tmp.length, this.multicastAddress, Puertos.SERVIDOR_MULTICAST);                                                
                            socket.send(p1);                             
                            oos.close();
                            baos.close();    

                        }//for       
                        System.out.println("ENVIO TERMINADO");
                } 
                else{      
                        br = dis.read(b);                                          
                        FIleP d = new FIleP(this,b);
                        ByteArrayOutputStream baos = new ByteArrayOutputStream();
                        ObjectOutputStream oos = new ObjectOutputStream(baos);
                        oos.writeObject(d);
                        oos.flush();
                        byte[] tmp = baos.toByteArray();                        
                        DatagramPacket p = new DatagramPacket(tmp, tmp.length, this.multicastAddress, Puertos.SERVIDOR_MULTICAST);
                        socket.send(p);                        
                        oos.close();
                        baos.close();
                        
                }//else

                } catch (IOException ex) {   
            }            
        }
        else
        {
            if (!message.isEmpty()) {
                try {
                    byte[] data = new byte[Interaccion.MAX_BUFFER_SIZE];
                    data[0] = Interaccion.MENSAJE_GRUPAL;
                    if (usuarioSeleccionado != null) {
                        message = usuarioSeleccionado.getNombre() + "@" + message;
                        data[0] = Interaccion.MENSAJE_PRIVADO;
                    }

                    // <editor-fold desc="Aviso de conexión">
                    byte[] nombre = message.getBytes();
                    System.arraycopy(nombre, 0, data, 1, nombre.length);

                    DatagramPacket dp = new DatagramPacket(data, Interaccion.MAX_BUFFER_SIZE, this.multicastAddress, Puertos.SERVIDOR_MULTICAST);
                    socket.send(dp);

                } catch (IOException ex) {
                }
            }
        }
    }

    @Override
    public void userRemoved(Usuario u) {
        usuarios.remove(u);
        model.removeElement(u);
    }

    @Override
    public void userAdded(Usuario u) {
        usuarios.add(u);
        model.addElement(u);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane chatView;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JList listaUsuarios;
    private javax.swing.JEditorPane message;
    // End of variables declaration//GEN-END:variables

    @Override
    public void nuevoMensajeHandler(NuevoMensajeEvent e) {
        Calendar gc = new GregorianCalendar();
        String hora = gc.get(Calendar.HOUR) +":" + gc.get(Calendar.MINUTE) + ":" + gc.get(Calendar.SECOND);                
        if (e.isPrivado()) {
            String msg = e.getTexto();
            int at = msg.indexOf("@");
            if (msg.substring(0, at).equals(nombreUsuario)) 
            {
                //chatView.setText(chatView.getText() + e.getSender() + " te dice en privado:\n" + msg.substring(at + 1) + "\n");
                Element[] roots = docChat.getRootElements();
                Element body = null;
                for (int i = 0; i < roots[0].getElementCount(); i++) {
                    Element element = roots[0].getElement(i);
                    if (element.getAttributes().getAttribute(StyleConstants.NameAttribute) == HTML.Tag.BODY) {
                        body = element;
                        break;
                    }
                }
                try {
                    System.out.println(e.getTexto());
                    int x = e.getTexto().indexOf("@");
                    String auxxx = e.getTexto().substring(x+1, e.getTexto().length() );
                    System.out.println(auxxx);
                    String aux =auxxx+"Dijo en privado: " +e.getSender() + "  Hora: " + hora;                
                    docChat.insertBeforeEnd(body, aux);                
                } catch (Exception ex) {
                    Logger.getLogger(interfaz.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {            
            //chatView.setText(chatView.getText() + e.getSender() + " dice:\n" + e.getTexto() + "\n");         
            Element[] roots = docChat.getRootElements();
            Element body = null;
            for (int i = 0; i < roots[0].getElementCount(); i++) {
                Element element = roots[0].getElement(i);
                if (element.getAttributes().getAttribute(StyleConstants.NameAttribute) == HTML.Tag.BODY) {
                    body = element;
                    break;
                }
            }
            try {
                String aux =e.getTexto()+"Dijo: " +e.getSender() + "  Hora: " + hora;                
                docChat.insertBeforeEnd(body, aux);                
            } catch (Exception ex) {
                Logger.getLogger(interfaz.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
        
    public File seleccionarArchivo()
    {              
        JFileChooser jf = new JFileChooser();
        jf.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        jf.setMultiSelectionEnabled(true); 
        int r = jf.showOpenDialog(null);            
        File f = null;
        while( f == null )
        {
            if(r == JFileChooser.APPROVE_OPTION)            
            {
                f = jf.getSelectedFile();                
            }    
            else
            {
                JOptionPane.showMessageDialog(null, "Debes seleccionar un archivo");
                break;
            }
        }   
        return f;
    }  

    @Override
    public void recibirArchivo(FIleP f) 
    {                        
        try {
                   
                                                                
            dos.write(f.getDatos(), 0, f.getDatos().length);                                                    
            
        } catch (Exception e) {
        }                                            
    }

}
